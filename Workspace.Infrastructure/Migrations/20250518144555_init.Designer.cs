// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Workspace.Infrastructure;

#nullable disable

namespace Workspace.Infrastructure.Migrations
{
    [DbContext(typeof(WorkspaceDbContext))]
    [Migration("20250518144555_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Workspace.Domain.Entities.Relation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FirstUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecondUnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FirstUnitId");

                    b.HasIndex("SecondUnitId");

                    b.HasIndex("WorkspaceEntityId");

                    b.ToTable("WorkspaceRelations");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.WorkspaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.WorkspacePerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkspaceEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceEntityId");

                    b.ToTable("WorkspacePersons");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.WorkspaceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkspaceEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceEntityId");

                    b.ToTable("WorkspaceUnits");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.Relation", b =>
                {
                    b.HasOne("Workspace.Domain.Entities.WorkspaceUnit", "FirstUnit")
                        .WithMany()
                        .HasForeignKey("FirstUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Domain.Entities.WorkspaceUnit", "SecondUnit")
                        .WithMany()
                        .HasForeignKey("SecondUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Workspace.Domain.Entities.WorkspaceEntity", "WorkspaceEntity")
                        .WithMany("Relations")
                        .HasForeignKey("WorkspaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstUnit");

                    b.Navigation("SecondUnit");

                    b.Navigation("WorkspaceEntity");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.WorkspacePerson", b =>
                {
                    b.HasOne("Workspace.Domain.Entities.WorkspaceEntity", "WorkspaceEntity")
                        .WithMany("WorkspacePersons")
                        .HasForeignKey("WorkspaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkspaceEntity");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.WorkspaceUnit", b =>
                {
                    b.HasOne("Workspace.Domain.Entities.WorkspaceEntity", "WorkspaceEntity")
                        .WithMany("Units")
                        .HasForeignKey("WorkspaceEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkspaceEntity");
                });

            modelBuilder.Entity("Workspace.Domain.Entities.WorkspaceEntity", b =>
                {
                    b.Navigation("Relations");

                    b.Navigation("Units");

                    b.Navigation("WorkspacePersons");
                });
#pragma warning restore 612, 618
        }
    }
}
